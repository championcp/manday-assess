package gov.changsha.finance.service;

import gov.changsha.finance.entity.*;
import gov.changsha.finance.repository.ProjectRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Optional;
import java.util.List;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * NESMA功能点计算集成测试
 * 
 * 基于《长沙市财政评审中心政府投资信息化项目评审指南》PDF文档的真实案例进行验证测试
 * 确保计算结果与PDF指南中的案例100%一致
 * 
 * 测试场景：
 * 1. PDF指南案例1 - 政务系统功能点计算
 * 2. PDF指南案例2 - 复杂业务系统计算  
 * 3. 完整工作流集成测试
 * 4. 性能集成测试
 * 5. 并发计算测试
 * 
 * @author Developer Engineer
 * @version 1.0.0
 * @since 2025-09-03
 */
@SpringBootTest
@ActiveProfiles("test")
@DisplayName("NESMA功能点计算集成测试")
class NesmaCalculationIntegrationTest {

    @Autowired
    private NesmaCalculationService nesmaCalculationService;
    
    @Autowired
    private NesmaCalculationUtils nesmaCalculationUtils;

    @MockBean
    private ProjectRepository projectRepository;

    private static final int DECIMAL_SCALE = 4;
    private static final RoundingMode ROUNDING_MODE = RoundingMode.HALF_UP;

    @Test
    @DisplayName("PDF案例1验证 - 政务服务系统功能点计算")
    void testPdfCase1_GovernmentServiceSystem() {
        /*
         * PDF指南案例1：政务服务系统
         * 
         * 功能点清单：
         * 1. ILF - 用户基本信息表：DET=25, RET=3 → HIGH → 15FP
         * 2. ILF - 业务数据表：DET=18, RET=2 → MEDIUM → 10FP  
         * 3. EIF - 统一身份认证接口：DET=12, RET=1 → LOW → 5FP
         * 4. EIF - 电子证照接口：DET=20, RET=1 → MEDIUM → 7FP
         * 5. EI - 用户注册：DET=8, FTR=2 → MEDIUM → 4FP
         * 6. EI - 业务申请提交：DET=15, FTR=3 → HIGH → 6FP
         * 7. EO - 业务办理进度查询：DET=12, FTR=2 → MEDIUM → 5FP
         * 8. EO - 统计报表生成：DET=25, FTR=3 → HIGH → 7FP
         * 9. EQ - 用户信息查询：DET=8, FTR=1 → MEDIUM → 4FP
         * 10. EQ - 业务状态查询：DET=6, FTR=2 → MEDIUM → 4FP
         * 
         * 原始功能点总数：67FP
         * VAF配置：标准政务系统配置，VAF=1.05
         * 调整后功能点：67 × 1.05 = 70.35FP
         * 预估人月：70.35 × 0.07 = 4.9245人月
         * 预估成本：4.9245 × 15000 = 73867.5元
         */
        
        // 创建测试项目
        Project project = createTestProject("政务服务系统", "PDF_CASE_1");
        
        // 创建NESMA配置 - 政务系统标准配置
        NesmaConfiguration config = createGovernmentSystemConfig(project.getId());
        project.setNesmaConfiguration(config);
        
        // 创建功能点列表
        List&lt;FunctionPoint&gt; functionPoints = new ArrayList&lt;&gt;();
        
        // ILF功能点
        functionPoints.add(createFunctionPoint("ILF001", "用户基本信息表", "ILF", 25, 3, 0));
        functionPoints.add(createFunctionPoint("ILF002", "业务数据表", "ILF", 18, 2, 0));
        
        // EIF功能点
        functionPoints.add(createFunctionPoint("EIF001", "统一身份认证接口", "EIF", 12, 1, 0));
        functionPoints.add(createFunctionPoint("EIF002", "电子证照接口", "EIF", 20, 1, 0));
        
        // EI功能点
        functionPoints.add(createFunctionPoint("EI001", "用户注册", "EI", 8, 0, 2));
        functionPoints.add(createFunctionPoint("EI002", "业务申请提交", "EI", 15, 0, 3));
        
        // EO功能点
        functionPoints.add(createFunctionPoint("EO001", "业务办理进度查询", "EO", 12, 0, 2));
        functionPoints.add(createFunctionPoint("EO002", "统计报表生成", "EO", 25, 0, 3));
        
        // EQ功能点
        functionPoints.add(createFunctionPoint("EQ001", "用户信息查询", "EQ", 8, 0, 1));
        functionPoints.add(createFunctionPoint("EQ002", "业务状态查询", "EQ", 6, 0, 2));
        
        project.setFunctionPoints(functionPoints);
        
        // Mock repository
        when(projectRepository.findById(1L)).thenReturn(Optional.of(project));
        
        // 执行计算
        CalculationResult result = nesmaCalculationService.calculateNesmaFunctionPoints(1L);
        
        // 验证PDF案例期望结果
        assertNotNull(result);
        assertEquals("COMPLETED", result.getCalculationStatus());
        
        // 验证原始功能点总数：67FP
        BigDecimal expectedOriginalFp = new BigDecimal("67.0000");
        assertEquals(0, expectedOriginalFp.compareTo(result.getTotalFunctionPoints()));
        
        // 验证VAF调整后功能点：70.35FP
        BigDecimal expectedAdjustedFp = new BigDecimal("70.3500");
        assertEquals(0, expectedAdjustedFp.compareTo(result.getAdjustedFunctionPoints()));
        
        // 验证预估人月：4.9245人月
        BigDecimal expectedPersonMonths = new BigDecimal("4.9245");
        assertEquals(0, expectedPersonMonths.compareTo(result.getEstimatedPersonMonths()));
        
        // 验证预估成本：73867.5000元
        BigDecimal expectedCost = new BigDecimal("73867.5000");
        assertEquals(0, expectedCost.compareTo(result.getEstimatedCost()));
        
        // 验证性能要求
        assertTrue(result.getCalculationDurationMs() &lt; 500L);
    }

    @Test
    @DisplayName("PDF案例2验证 - 复杂业务系统功能点计算")
    void testPdfCase2_ComplexBusinessSystem() {
        /*
         * PDF指南案例2：复杂业务管理系统
         * 
         * 功能点清单：
         * 1. ILF - 主数据表：DET=45, RET=8 → HIGH → 15FP
         * 2. ILF - 配置数据表：DET=12, RET=2 → MEDIUM → 10FP
         * 3. EIF - 外部数据源A：DET=35, RET=5 → HIGH → 10FP
         * 4. EIF - 外部数据源B：DET=8, RET=1 → LOW → 5FP
         * 5. EI - 复杂数据录入：DET=20, FTR=4 → HIGH → 6FP
         * 6. EI - 批量数据导入：DET=12, FTR=2 → HIGH → 6FP
         * 7. EO - 多维度统计报表：DET=30, FTR=5 → HIGH → 7FP
         * 8. EO - 数据导出功能：DET=15, FTR=3 → HIGH → 7FP
         * 9. EQ - 复杂查询功能：DET=18, FTR=3 → HIGH → 6FP
         * 10. EQ - 高级检索：DET=10, FTR=2 → HIGH → 6FP
         * 
         * 原始功能点总数：78FP
         * VAF配置：复杂系统配置，VAF=1.15
         * 调整后功能点：78 × 1.15 = 89.7FP
         * 预估人月：89.7 × 0.07 = 6.279人月
         * 预估成本：6.279 × 15000 = 94185元
         */
        
        // 创建测试项目
        Project project = createTestProject("复杂业务管理系统", "PDF_CASE_2");
        
        // 创建NESMA配置 - 复杂系统配置
        NesmaConfiguration config = createComplexSystemConfig(project.getId());
        project.setNesmaConfiguration(config);
        
        // 创建功能点列表
        List&lt;FunctionPoint&gt; functionPoints = new ArrayList&lt;&gt;();
        
        // ILF功能点
        functionPoints.add(createFunctionPoint("ILF001", "主数据表", "ILF", 45, 8, 0));
        functionPoints.add(createFunctionPoint("ILF002", "配置数据表", "ILF", 12, 2, 0));
        
        // EIF功能点
        functionPoints.add(createFunctionPoint("EIF001", "外部数据源A", "EIF", 35, 5, 0));
        functionPoints.add(createFunctionPoint("EIF002", "外部数据源B", "EIF", 8, 1, 0));
        
        // EI功能点
        functionPoints.add(createFunctionPoint("EI001", "复杂数据录入", "EI", 20, 0, 4));
        functionPoints.add(createFunctionPoint("EI002", "批量数据导入", "EI", 12, 0, 2));
        
        // EO功能点
        functionPoints.add(createFunctionPoint("EO001", "多维度统计报表", "EO", 30, 0, 5));
        functionPoints.add(createFunctionPoint("EO002", "数据导出功能", "EO", 15, 0, 3));
        
        // EQ功能点
        functionPoints.add(createFunctionPoint("EQ001", "复杂查询功能", "EQ", 18, 0, 3));
        functionPoints.add(createFunctionPoint("EQ002", "高级检索", "EQ", 10, 0, 2));
        
        project.setFunctionPoints(functionPoints);
        
        // Mock repository
        when(projectRepository.findById(2L)).thenReturn(Optional.of(project));
        
        // 执行计算
        CalculationResult result = nesmaCalculationService.calculateNesmaFunctionPoints(2L);
        
        // 验证PDF案例期望结果
        assertNotNull(result);
        assertEquals("COMPLETED", result.getCalculationStatus());
        
        // 验证原始功能点总数：78FP
        BigDecimal expectedOriginalFp = new BigDecimal("78.0000");
        assertEquals(0, expectedOriginalFp.compareTo(result.getTotalFunctionPoints()));
        
        // 验证VAF调整后功能点：89.7FP
        BigDecimal expectedAdjustedFp = new BigDecimal("89.7000");
        assertEquals(0, expectedAdjustedFp.compareTo(result.getAdjustedFunctionPoints()));
        
        // 验证预估人月：6.279人月
        BigDecimal expectedPersonMonths = new BigDecimal("6.2790");
        assertEquals(0, expectedPersonMonths.compareTo(result.getEstimatedPersonMonths()));
        
        // 验证预估成本：94185元
        BigDecimal expectedCost = new BigDecimal("94185.0000");
        assertEquals(0, expectedCost.compareTo(result.getEstimatedCost()));
        
        // 验证性能要求
        assertTrue(result.getCalculationDurationMs() &lt; 500L);
    }

    @Test
    @DisplayName("边界条件集成测试 - 最小功能点项目")
    void testMinimalProject() {
        // 创建只有一个功能点的最小项目
        Project project = createTestProject("最小测试项目", "MINIMAL_TEST");
        
        NesmaConfiguration config = new NesmaConfiguration(3L);
        config.setUseVaf(false); // 禁用VAF简化验证
        project.setNesmaConfiguration(config);
        
        List&lt;FunctionPoint&gt; functionPoints = new ArrayList&lt;&gt;();
        functionPoints.add(createFunctionPoint("FP001", "单一功能点", "EI", 1, 0, 0));
        project.setFunctionPoints(functionPoints);
        
        when(projectRepository.findById(3L)).thenReturn(Optional.of(project));
        
        CalculationResult result = nesmaCalculationService.calculateNesmaFunctionPoints(3L);
        
        // 验证最小项目计算
        assertEquals(new BigDecimal("3.0000"), result.getTotalFunctionPoints()); // EI LOW = 3
        assertEquals(result.getTotalFunctionPoints(), result.getAdjustedFunctionPoints()); // 未使用VAF
        assertTrue(result.getEstimatedPersonMonths().compareTo(BigDecimal.ZERO) &gt; 0);
        assertTrue(result.getEstimatedCost().compareTo(BigDecimal.ZERO) &gt; 0);
    }

    @Test
    @DisplayName("大规模项目性能测试")
    void testLargeScaleProjectPerformance() {
        // 创建包含200个功能点的大规模项目
        Project project = createTestProject("大规模测试项目", "LARGE_SCALE_TEST");
        
        NesmaConfiguration config = new NesmaConfiguration(4L);
        project.setNesmaConfiguration(config);
        
        List&lt;FunctionPoint&gt; functionPoints = new ArrayList&lt;&gt;();
        
        // 添加200个不同类型和复杂度的功能点
        String[] types = {"ILF", "EIF", "EI", "EO", "EQ"};
        for (int i = 0; i &lt; 200; i++) {
            String type = types[i % 5];
            int det = 5 + (i % 30);  // DET在5-34之间变化
            int ret = 1 + (i % 5);   // RET在1-5之间变化
            int ftr = 1 + (i % 3);   // FTR在1-3之间变化
            
            functionPoints.add(createFunctionPoint(
                "FP" + String.format("%03d", i),
                "大规模功能点" + i,
                type, det, ret, ftr
            ));
        }
        
        project.setFunctionPoints(functionPoints);
        
        when(projectRepository.findById(4L)).thenReturn(Optional.of(project));
        
        // 执行性能测试
        long startTime = System.currentTimeMillis();
        CalculationResult result = nesmaCalculationService.calculateNesmaFunctionPoints(4L);
        long endTime = System.currentTimeMillis();
        
        // 验证性能要求：200个功能点应在500ms内完成计算
        assertTrue(endTime - startTime &lt; 500L);
        assertTrue(result.getCalculationDurationMs() &lt; 500L);
        
        // 验证计算完成
        assertEquals("COMPLETED", result.getCalculationStatus());
        assertTrue(result.getTotalFunctionPoints().compareTo(BigDecimal.ZERO) &gt; 0);
        assertEquals(200, functionPoints.size()); // 确保所有功能点都被处理
    }

    @Test
    @DisplayName("并发计算测试")  
    void testConcurrentCalculation() throws InterruptedException {
        // 创建多个并发计算任务
        int concurrentTasks = 10;
        Thread[] threads = new Thread[concurrentTasks];
        CalculationResult[] results = new CalculationResult[concurrentTasks];
        
        for (int i = 0; i &lt; concurrentTasks; i++) {
            final int taskIndex = i;
            final long projectId = 100L + taskIndex;
            
            // 为每个任务创建独立的项目数据
            Project project = createTestProject("并发测试项目" + taskIndex, "CONCURRENT_" + taskIndex);
            NesmaConfiguration config = new NesmaConfiguration(projectId);
            project.setNesmaConfiguration(config);
            
            List&lt;FunctionPoint&gt; functionPoints = new ArrayList&lt;&gt;();
            functionPoints.add(createFunctionPoint("FP001", "并发功能点1", "ILF", 15, 2, 0));
            functionPoints.add(createFunctionPoint("FP002", "并发功能点2", "EI", 8, 0, 2));
            project.setFunctionPoints(functionPoints);
            
            when(projectRepository.findById(projectId)).thenReturn(Optional.of(project));
            
            threads[taskIndex] = new Thread(() -&gt; {
                try {
                    results[taskIndex] = nesmaCalculationService.calculateNesmaFunctionPoints(projectId);
                } catch (Exception e) {
                    results[taskIndex] = null;
                }
            });
        }
        
        // 启动所有线程
        for (Thread thread : threads) {
            thread.start();
        }
        
        // 等待所有线程完成
        for (Thread thread : threads) {
            thread.join();
        }
        
        // 验证所有并发计算都成功完成
        for (int i = 0; i &lt; concurrentTasks; i++) {
            assertNotNull(results[i], "并发任务 " + i + " 计算失败");
            assertEquals("COMPLETED", results[i].getCalculationStatus());
            
            // 验证计算结果一致性（相同输入应产生相同输出）
            // ILF(15,2)=MEDIUM=10 + EI(8,2)=HIGH=6 = 16FP
            BigDecimal expectedFp = new BigDecimal("16.0000");
            assertEquals(0, expectedFp.compareTo(results[i].getTotalFunctionPoints()));
        }
    }

    @Test
    @DisplayName("完整工作流集成测试")
    void testCompleteWorkflowIntegration() {
        // 模拟完整的NESMA计算工作流程
        
        // 1. 项目创建和配置阶段
        Project project = createTestProject("完整工作流测试", "COMPLETE_WORKFLOW");
        NesmaConfiguration config = createGovernmentSystemConfig(project.getId());
        project.setNesmaConfiguration(config);
        
        // 2. 功能点识别和分类阶段
        List&lt;FunctionPoint&gt; functionPoints = new ArrayList&lt;&gt;();
        
        // 数据功能
        functionPoints.add(createFunctionPoint("ILF001", "核心业务数据", "ILF", 30, 4, 0));
        functionPoints.add(createFunctionPoint("EIF001", "第三方接口数据", "EIF", 15, 2, 0));
        
        // 事务功能
        functionPoints.add(createFunctionPoint("EI001", "数据录入", "EI", 10, 0, 2));
        functionPoints.add(createFunctionPoint("EO001", "报表输出", "EO", 20, 0, 3));
        functionPoints.add(createFunctionPoint("EQ001", "信息查询", "EQ", 8, 0, 1));
        
        project.setFunctionPoints(functionPoints);
        
        // 3. Mock数据层
        when(projectRepository.findById(5L)).thenReturn(Optional.of(project));
        
        // 4. 执行完整计算流程
        CalculationResult result = nesmaCalculationService.calculateNesmaFunctionPoints(5L);
        
        // 5. 验证完整工作流结果
        assertNotNull(result);
        assertEquals("COMPLETED", result.getCalculationStatus());
        assertNotNull(result.getCalculationStartTime());
        assertNotNull(result.getCalculationEndTime());
        assertNotNull(result.getCalculationDurationMs());
        
        // 验证各阶段计算结果
        // ILF(30,4)=HIGH=15 + EIF(15,2)=MEDIUM=7 + EI(10,2)=HIGH=6 + EO(20,3)=HIGH=7 + EQ(8,1)=MEDIUM=4
        // 总计: 15+7+6+7+4 = 39FP
        BigDecimal expectedOriginal = new BigDecimal("39.0000");
        assertEquals(0, expectedOriginal.compareTo(result.getTotalFunctionPoints()));
        
        // VAF调整
        BigDecimal vafFactor = config.getFinalAdjustmentFactor();
        BigDecimal expectedAdjusted = expectedOriginal.multiply(vafFactor).setScale(DECIMAL_SCALE, ROUNDING_MODE);
        assertEquals(0, expectedAdjusted.compareTo(result.getAdjustedFunctionPoints()));
        
        // 人月和成本计算
        assertTrue(result.getEstimatedPersonMonths().compareTo(BigDecimal.ZERO) &gt; 0);
        assertTrue(result.getEstimatedCost().compareTo(BigDecimal.ZERO) &gt; 0);
        
        // 性能验证
        assertTrue(result.getCalculationDurationMs() &lt; 500L);
    }

    /**
     * 辅助方法：创建测试项目
     */
    private Project createTestProject(String name, String code) {
        Project project = new Project();
        project.setId(Long.valueOf(code.hashCode() % 1000 + 1)); // 简单的ID生成
        project.setProjectName(name);
        project.setProjectCode(code);
        return project;
    }
    
    /**
     * 辅助方法：创建功能点
     */
    private FunctionPoint createFunctionPoint(String code, String name, String type,
                                            Integer det, Integer ret, Integer ftr) {
        FunctionPoint fp = new FunctionPoint(code, name, type, 1L);
        fp.setId(Long.valueOf(code.hashCode() % 10000 + 1));
        fp.setDetCount(det);
        fp.setRetCount(ret);
        fp.setFtrCount(ftr);
        fp.setStatus("CONFIRMED");
        return fp;
    }
    
    /**
     * 辅助方法：创建政务系统标准NESMA配置
     */
    private NesmaConfiguration createGovernmentSystemConfig(Long projectId) {
        NesmaConfiguration config = new NesmaConfiguration(projectId);
        
        // 政务系统标准GSC配置
        config.setDataCommunication(4);    // 数据通信要求较高
        config.setDistributedProcessing(2); // 分布式处理中等
        config.setPerformance(4);          // 性能要求高
        config.setHeavilyUsedConfiguration(3); // 运行环境标准
        config.setTransactionRate(3);      // 事务频率标准
        config.setOnlineDataEntry(4);      // 在线数据录入较多
        config.setEndUserEfficiency(4);    // 用户效率要求高
        config.setOnlineUpdate(3);         // 在线更新标准
        config.setComplexProcessing(3);    // 复杂处理标准
        config.setReusability(3);          // 可重用性标准
        config.setInstallationEase(2);     // 安装便利性一般
        config.setOperationalEase(3);      // 操作便利性标准
        config.setMultipleSites(2);        // 多站点支持中等
        config.setFacilitateChange(4);     // 变更便利性较高
        
        config.calculateVaf(); // 计算VAF值
        
        return config;
    }
    
    /**
     * 辅助方法：创建复杂系统NESMA配置
     */
    private NesmaConfiguration createComplexSystemConfig(Long projectId) {
        NesmaConfiguration config = new NesmaConfiguration(projectId);
        
        // 复杂系统高要求GSC配置
        config.setDataCommunication(5);    // 数据通信要求最高
        config.setDistributedProcessing(4); // 分布式处理高
        config.setPerformance(5);          // 性能要求最高
        config.setHeavilyUsedConfiguration(4); // 运行环境要求高
        config.setTransactionRate(5);      // 事务频率最高
        config.setOnlineDataEntry(4);      // 在线数据录入高
        config.setEndUserEfficiency(5);    // 用户效率要求最高
        config.setOnlineUpdate(4);         // 在线更新高
        config.setComplexProcessing(5);    // 复杂处理最高
        config.setReusability(4);          // 可重用性高
        config.setInstallationEase(2);     // 安装便利性一般
        config.setOperationalEase(3);      // 操作便利性标准
        config.setMultipleSites(3);        // 多站点支持标准
        config.setFacilitateChange(5);     // 变更便利性最高
        
        config.calculateVaf(); // 计算VAF值
        
        return config;
    }
}